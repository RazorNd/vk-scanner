import {SubjectReferencePipe} from './subject-reference.pipe';
import {TestBed} from "@angular/core/testing";
import {DomSanitizer} from "@angular/platform-browser";

describe('SubjectReferencePipe', () => {

  const sanitizer = jasmine.createSpyObj<DomSanitizer>('DomSanitizer', ['bypassSecurityTrustHtml']);

  let pipe: SubjectReferencePipe;

  beforeEach(() => {
    TestBed.configureTestingModule({
      providers: [
        {provide: DomSanitizer, useValue: sanitizer},
        SubjectReferencePipe
      ]
    });
    pipe = TestBed.get(SubjectReferencePipe);
    sanitizer.bypassSecurityTrustHtml.and.callFake(s => s)
  });

  it('create an instance', () => {
    expect(pipe).toBeTruthy();
  });

  it('correct transform', () => {
    [
      [' ', ' '],
      ['[id154323434|Andrey], —Ä–∞–¥–∞ –∑–∞ —Ç–≤–æ–µ–≥–æ –ú–∞–∫—Å–∞ üòÜ', '<span class="test">Andrey</span>, —Ä–∞–¥–∞ –∑–∞ —Ç–≤–æ–µ–≥–æ –ú–∞–∫—Å–∞ üòÜ'],
      [
        ' [id420202121|–ê–ª–µ–∫—Å–∞–Ω–¥—Ä], —É –º–µ–Ω—è –Ω–æ—Ä–º–∞ –≤ –¥–µ–Ω—å - —É–≤–µ—Å—Ç–∏ 5 "–º—É–∂–∏–∫–æ–≤", —Ç–æ–ª—å–∫–æ —á—Ç–æ –≤–æ—Ç 5-–æ–≥–æ —É–≤–µ–ª–∞ üòÜ ',
        ' <span class="test">–ê–ª–µ–∫—Å–∞–Ω–¥—Ä</span>, —É –º–µ–Ω—è –Ω–æ—Ä–º–∞ –≤ –¥–µ–Ω—å - —É–≤–µ—Å—Ç–∏ 5 "–º—É–∂–∏–∫–æ–≤", —Ç–æ–ª—å–∫–æ —á—Ç–æ –≤–æ—Ç 5-–æ–≥–æ —É–≤–µ–ª–∞ üòÜ '
      ],
      [
        ' [id155323434|Andrey] –∏ [id420202121|–ê–ª–µ–∫—Å–∞–Ω–¥—Ä], —Ä–∞–¥–∞ –∑–∞ —Ç–≤–æ–µ–≥–æ –ú–∞–∫—Å–∞ üòÜ',
        ' <span class="test">Andrey</span> –∏ <span class="test">–ê–ª–µ–∫—Å–∞–Ω–¥—Ä</span>, —Ä–∞–¥–∞ –∑–∞ —Ç–≤–æ–µ–≥–æ –ú–∞–∫—Å–∞ üòÜ'
      ],
      ['–ù–∞ —à—É—Ä–ø—É, [id145213230|–û–ª—å–≥–∞]?', '–ù–∞ —à—É—Ä–ø—É, <span class="test">–û–ª—å–≥–∞</span>?'],
      [
        '–∂–∏–∑–Ω—å —Å–ª–æ–∂–Ω–∞—è.\n[id162623634|–û–ª—å–≥–∞], –º–æ–∂–µ—Ç –∏ –ø–æ—Ö–≤–∞–ª–∏–ª—Å—è',
        '–∂–∏–∑–Ω—å —Å–ª–æ–∂–Ω–∞—è.\n<span class="test">–û–ª—å–≥–∞</span>, –º–æ–∂–µ—Ç –∏ –ø–æ—Ö–≤–∞–ª–∏–ª—Å—è'
      ],
    ].forEach(([values, expected]) => expect(pipe.transform(values, 'test')).toBe(expected))
  });
});
